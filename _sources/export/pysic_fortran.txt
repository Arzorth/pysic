.. module:: pysic_fortran.pysic_interface

.. _pysic_fortran_module:

====================
Pysic Fortran Module
====================

Pysic fortran is the Python interface of the Fortran core generated
using f2py from PyInterface.F90. This is the only Fortran source file of Pysic 
that should be wrapped with f2py: the rest of the core needs to be directly 
compiled with a Fortran compiler to .mod Fortran modules.

The module is naturally accessible from within Python, 
but usually there should be no need to directly invoke its functions as :mod:`~pysic` 
defines a more refined interface to the Fortran core, mainly through the
class :class:`~pysic.Pysic`. It is assumed that the arguments passed to the functions
have proper data types and array dimensions, and that they are called in such an
order that the necessary memory allocations have been done within Fortran before data
structures are accessed. Methods in :class:`~pysic.Pysic` do this automatically and are 
thus much safer to use than directly calling the functions in this module.



.. function:: get_owner_id()

   Returns the ID number of the :class:`~pysic.Pysic` object accessing the core.
   
   The IDs should be integers starting from 1. If the core is free, -1 is returned.


.. function:: set_owner_id(id)
   
   Tells the core what is the ID number of the :class:`~pysic.Pysic` object accessing it.
   
   The IDs should be integers starting from 1. If the core is free, -1 is returned.

   Parameters:

   id: integer
       ID number of a :class:`~pysic.Pysic` calculator.


.. function:: can_be_accessed(id)

   Tells if the :class:`~pysic.Pysic` object of the given ID can access the core.

   True is returned if the owner ID of the core matches or if the core has no owner.

   Parameters:

   id: integer
       ID number of a :class:`~pysic.Pysic` calculator.


.. function:: start_mpi()

.. function:: finish_mpi()

.. function:: start_potentials()

.. function:: create_cell(vectors,inverse,periodicity)

.. function:: get_cell_vectors()

.. function:: create_atoms(masses,charges,positions,momenta,tags,elements)

.. function:: update_atom_coordinates(positions,momenta)

.. function:: get_number_of_atoms()

.. function:: examine_atoms()

.. function:: examine_cell()

.. function:: examine_potentials()

.. function:: allocate_potentials(n_pots)

.. function:: add_potential(pot_name,parameters,cutoff,elements,tags,indices)

.. function:: create_neighbor_list(atom_index, neighbors, offsets)

.. function:: create_potential_list()

.. function:: calculate_energy()

.. function:: calculate_forces(n_atoms)

.. function:: calcualte_stress()

.. function:: number_of_potentials()

.. function:: is_potential(string)

.. function:: list_valid_potentials(n_pots)

.. function:: number_of_targets_of_potential(pot_name)

.. function:: number_of_parameters_of_potential(pot_name)

.. function:: names_of_parameters_of_potential(pot_name)

.. function:: description_of_parameters_of_potential(pot_name)

.. function:: description_of_potential(pot_name)

.. function:: release()

